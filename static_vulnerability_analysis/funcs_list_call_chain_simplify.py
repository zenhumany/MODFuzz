
import networkx
from gadgets import *
from important_global_data import *


USB_strong_related_funcs_r = []
USB_weak_related_funcs_r = []
dangerous_funcs_r = []

USB_strong_related_funcs_full = list(set(USB_strong_related_funcs_full))
USB_weak_related_funcs_full = list(set(USB_weak_related_funcs_full))
dangerous_funcs_full = list(set(dangerous_funcs_full))

kernel = angr.Project(kernal_binary, use_sim_procedures=False, auto_load_libs=False)
cfg = load_cfg()

for i in USB_strong_related_funcs_full:
    source_node = cfg.model.get_any_node(kernel.loader.find_symbol(i).rebased_addr)

    discard = 0
    for j in USB_strong_related_funcs_full:
        if i != j:
            target_node = cfg.model.get_any_node(kernel.loader.find_symbol(j).rebased_addr)
            total_call_rate = 1
            try:
                paths = list(networkx.all_shortest_paths(G=cfg.graph, source=source_node, target=target_node,
                                                         method='dijkstra'))
                for path in paths:
                    total_call_rate *= calc_call_rate(path)
            except Exception as e:
                if "cannot be reachedfrom given sources" in str(e):
                    # print('A unreachable exception between ' + source_node.name + ' and ' + target_node.name)
                    total_call_rate = 0
                else:
                    print(e)
            if total_call_rate == 1:

                discard = 1
                print('remove:', i, 'because|||||', i, '===>', j)
                break
    if discard == 0:
        USB_strong_related_funcs_r.append(i)

for i in USB_weak_related_funcs_full:
    source_node = cfg.model.get_any_node(kernel.loader.find_symbol(i).rebased_addr)

    discard = 0
    for j in USB_weak_related_funcs_full:
        if i != j:
            target_node = cfg.model.get_any_node(kernel.loader.find_symbol(j).rebased_addr)
            total_call_rate = 1
            try:
                paths = list(networkx.all_shortest_paths(G=cfg.graph, source=source_node, target=target_node,
                                                         method='dijkstra'))
                for path in paths:
                    total_call_rate *= calc_call_rate(path)
            except Exception as e:
                if "cannot be reachedfrom given sources" in str(e):
                    # print('A unreachable exception between ' + source_node.name + ' and ' + target_node.name)
                    total_call_rate = 0
                else:
                    print(e)
            if total_call_rate == 1:

                discard = 1
                print('remove:', i, 'because|||||', i, '===>', j)
                break
    if discard == 0:
        USB_weak_related_funcs_r.append(i)

for i in dangerous_funcs_full:
    source_node = cfg.model.get_any_node(kernel.loader.find_symbol(i).rebased_addr)

    discard = 0
    for j in dangerous_funcs_full:
        if i != j:
            target_node = cfg.model.get_any_node(kernel.loader.find_symbol(j).rebased_addr)
            total_call_rate = 1
            try:
                paths = list(networkx.all_shortest_paths(G=cfg.graph, source=source_node, target=target_node,
                                                         method='dijkstra'))
                for path in paths:
                    total_call_rate *= calc_call_rate(path)
            except Exception as e:
                if "cannot be reachedfrom given sources" in str(e):

                    total_call_rate = 0
                else:
                    print(e)
            if total_call_rate == 1:

                discard = 1
                print('remove:', i, 'because|||||', i, '===>', j)
                break
    if discard == 0:
        dangerous_funcs_r.append(i)

print('USB_strong_related_funcs_r: ', USB_strong_related_funcs_r)
print('USB_weak_related_funcs_r: ', USB_weak_related_funcs_r)
print('dangerous_funcs_r: ', dangerous_funcs_r)
